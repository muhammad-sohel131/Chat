{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.js","components/Login.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","lenght","src","file","alt","float","marginRight","background","color","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","Login","ReactDOM","render","document","getElementById"],"mappings":"4MAoDeA,EAhDK,SAACC,GAAW,IAAD,EAEDC,mBAAS,IAFR,mBAEpBC,EAFoB,KAEbC,EAFa,KAGnBC,EAAiBJ,EAAjBI,OAAQC,EAASL,EAATK,MAEVC,EAAe,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAAOP,EAAMQ,OAChBD,EAAKE,OAAS,GAAGC,YAAYP,EAAOD,EAAQ,CAAEK,SACjDN,EAAS,KAUb,OACI,uBAAMU,UAAU,eAAeC,SAAWR,EAA1C,UACI,uBACIO,UAAU,gBACVE,YAAY,oBACZb,MAAOA,EACPc,SAdS,SAACT,GAClBJ,EAASI,EAAMU,OAAOf,OACtBgB,YAASlB,EAAOI,IAaRU,SAAUR,IAEd,uBAAOa,QAAQ,gBAAf,SACI,sBAAMN,UAAU,eAAhB,SACI,cAACO,EAAA,EAAD,CAAiBP,UAAU,qBAGnC,uBACIQ,KAAK,OACLC,UAAU,EACVC,GAAG,gBACHC,MAAO,CAACC,QAAS,QACjBT,SAvBS,SAACT,GAClBK,YAAYP,EAAOD,EAAQ,CAACsB,MAAOnB,EAAMU,OAAOS,MAAOjB,KAAM,QAwBzD,wBAAQY,KAAK,SAASR,UAAU,cAAhC,SACI,cAACc,EAAA,EAAD,CAAcd,UAAU,oBCvBzBe,EAtBG,SAAC,GAAe,IAAD,EAAbC,EAAa,EAAbA,QAEhB,OAAU,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBC,QAAS,EAE1B,qBACIC,IAAKH,EAAQC,YAAY,GAAGG,KAC5BC,IAAI,qBACJrB,UAAU,gBACVW,MAAO,CAACW,MAAO,WAMvB,8BACI,qBAAKtB,UAAU,UAAUW,MAAO,CAACW,MAAO,QAASC,YAAa,OAAQC,WAAW,QAASC,MAAO,QAAjG,SACKT,EAAQpB,UCaV8B,EA7BM,SAAC,GAA8B,IAAD,IAA3BC,EAA2B,EAA3BA,YAAaX,EAAc,EAAdA,QAC3BY,GAAwBD,GAAeA,EAAYE,OAAOC,WAAad,EAAQa,OAAOC,SAC5F,OACI,sBAAK9B,UAAU,cAAf,UACK4B,GACG,qBACI5B,UAAU,iBACVW,MAAO,CAACa,WAAW,OAAD,cAASR,QAAT,IAASA,GAAT,UAASA,EAASa,cAAlB,aAAS,EAAiBE,OAA1B,SAId,OAAPf,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBC,QAAS,EAExB,qBACIC,IAAKH,EAAQC,YAAY,GAAGG,KAC5BC,IAAI,qBACJrB,UAAU,gBACVW,MAAO,CAACqB,WAAYJ,EAAuB,MAAQ,UAGvD,qBAAK5B,UAAU,UAAUW,MAAO,CAACW,MAAO,OAAQE,WAAY,UAAWQ,WAAYJ,EAAuB,MAAO,QAAjH,SACCZ,EAAQpB,WC2ClBqC,EA5DE,SAAC9C,GAAW,IACjB+C,EAA0C/C,EAA1C+C,MAAOC,EAAmChD,EAAnCgD,WAAYC,EAAuBjD,EAAvBiD,SAAUC,EAAalD,EAAbkD,SAC/BC,EAAOJ,GAASA,EAAMC,GAEtBI,EAAqB,SAACvB,EAASwB,GAClC,OAAOF,EAAKG,OAAOC,KAAI,SAACC,EAAQC,GAAT,aAAmBD,EAAOE,YAAc7B,EAAQN,IAClE,qBAEIV,UAAU,eACVW,MAAO,CACHW,MAAOkB,EAAc,QAAU,OAC/BhB,WAAW,OAAD,cAASmB,QAAT,IAASA,GAAT,UAASA,EAAQA,cAAjB,aAAS,EAAgBZ,OAAzB,OALlB,eACiBa,QAmC1B,OAAIN,EAEC,sBAAKtC,UAAU,YAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,SAA6BsC,EAAKQ,QAClC,qBAAK9C,UAAU,gBAAf,SACKsC,EAAKG,OAAOC,KAAI,SAACC,GAAD,gBAAeA,EAAOA,OAAOb,kBA/BvC,WACnB,IAAMiB,EAAOC,OAAOD,KAAKV,GACzB,OAAOU,EAAKL,KAAI,SAACO,EAAKL,GAClB,IAAM5B,EAAUqB,EAASY,GACnBC,EAA2B,IAAVN,EAAc,KAAOG,EAAKH,EAAM,GACjDJ,EAAcJ,IAAapB,EAAQa,OAAOC,SAGhD,OACI,sBAA0BnB,MAAO,CAACwC,MAAO,QAAzC,UACI,qBAAKnD,UAAU,gBAAf,SAEQwC,EACE,cAAC,EAAD,CAAWxB,QAASA,IACpB,cAAC,EAAD,CAAcA,QAASA,EAASW,YAAaX,EAAQkC,OAG/D,qBAAKlD,UAAU,gBAAgBW,MAAO,CAACY,YAAaiB,EAAc,OAAS,MAAOR,WAAYQ,EAAc,MAAQ,QAApH,SACKD,EAAmBvB,EAASwB,OATrC,cAAiBI,OAyBpBQ,GACD,qBAAKzC,MAAO,CAAC0C,OAAQ,WACrB,qBAAKrD,UAAU,yBAAf,SACI,cAAC,EAAD,2BAAiBb,GAAjB,IAAwBI,OAAQ4C,UAZ5B,c,yCCHLmB,EAxCG,WAAO,IAAD,EACYlE,mBAAS,IADrB,mBACb0C,EADa,KACHyB,EADG,OAEYnE,mBAAS,IAFrB,mBAEboE,EAFa,KAEHC,EAFG,OAGMrE,mBAAS,IAHf,mBAGbsE,EAHa,KAGNC,EAHM,KAKdlE,EAAY,uCAAG,WAAOmE,GAAP,eAAAC,EAAA,6DACjBD,EAAEjE,iBACImE,EAAc,CAAE,aAAc,uCAAwC,YAAahC,EAAU,cAAe0B,GAFjG,kBAKPO,IAAMC,IAAI,kCAAmC,CAAEC,QAASH,IALjD,OAObI,aAAaC,QAAQ,WAAYrC,GACjCoC,aAAaC,QAAQ,WAAYX,GAEjCY,OAAOC,SAASC,SAVH,kDAYbX,EAAS,wCAZI,0DAAH,sDAelB,OACI,qBAAK3D,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,8BAEA,uBAAMC,SAAUR,EAAhB,UACI,uBAAOe,KAAK,OAAOnB,MAAOyC,EAAU3B,SAAU,SAACyD,GAAD,OAAOL,EAAYK,EAAExD,OAAOf,QAASW,UAAU,QAAQE,YAAY,WAAWqE,UAAQ,IACpI,uBAAO/D,KAAK,WAAWnB,MAAOmE,EAAUrD,SAAU,SAACyD,GAAD,OAAOH,EAAYG,EAAExD,OAAOf,QAAQW,UAAU,QAAQE,YAAY,WAAWqE,UAAQ,IACvI,qBAAKC,MAAM,SAAX,SACI,wBAAQhE,KAAK,SAASR,UAAU,SAAhC,SACI,sDAGR,oBAAIA,UAAU,QAAd,SAAuB0D,aCf5Be,G,MAfH,WAER,OAAIP,aAAaQ,QAAQ,YAGrB,cAAC,IAAD,CACIrB,OAAO,QACPsB,UAAU,uCACVvC,SAAU8B,aAAaQ,QAAQ,YAC/BE,WAAYV,aAAaQ,QAAQ,YACjCG,eAAgB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAcA,OARX,cAAEC,EAAF,MCJjDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.314f88fd.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport { sendMessage, isTyping} from 'react-chat-engine'\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons'\r\n\r\nconst MessageForm = (props) => {\r\n\r\n    const [value, setValue] = useState('')\r\n    const { chatId, creds} = props\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const text = value.trim()\r\n        if(text.length > 0) sendMessage(creds, chatId, { text })\r\n        setValue('')\r\n    }\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value)\r\n        isTyping(props, chatId)\r\n    }\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, {files: event.target.files, text: ''})\r\n    } \r\n\r\n    return(\r\n        <form className=\"message-form\" onSubmit={ handleSubmit }>\r\n            <input \r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={ handleChange }\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\" />\r\n                </span>\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{display: 'none'}}\r\n                onChange={ handleUpload }\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\" />\r\n            </button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MessageForm","const MyMessage = ({message}) => {\r\n\r\n    if(message?.attachments?.lenght > 0){\r\n        return (\r\n            <img \r\n                src={message.attachments[1].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{float: 'right'}}\r\n            />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"message\" style={{float: 'right', marginRight: '18px', background:'green', color: '#fff'}}>\r\n                {message.text}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyMessage","const TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    return(\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div \r\n                    className=\"message-avatar\"\r\n                    style={{background: `url(${message?.sender?.avatar})`}}\r\n                />\r\n            )}\r\n            {\r\n                 message?.attachments?.lenght > 0\r\n                    ? (\r\n                        <img \r\n                            src={message.attachments[0].file}\r\n                            alt=\"message-attachment\"\r\n                            className=\"message-image\"\r\n                            style={{marginLeft: isFirstMessageByUser ? '4px' : '48px'}}\r\n                        />\r\n                    ): (\r\n                        <div className=\"message\" style={{float: 'left', background: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px': '48px'}}>\r\n                        {message.text}\r\n                    </div>\r\n                    )\r\n            }      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TheirMessage","import MessageForm from './MessageForm'\r\nimport MyMessage from './MyMessage'\r\nimport TheirMessage from './TheirMessage'\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props\r\n    const chat = chats && chats[activeChat]\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n       return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div \r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    background: `url(${person?.person?.avatar})`\r\n                }}\r\n            />\r\n        ))\r\n    }\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages)\r\n        return keys.map((key, index) => {\r\n            const message = messages[key]\r\n            const lastMessageKey = index === 0 ? null : keys[index-1]\r\n            const isMyMessage = userName === message.sender.username\r\n\r\n            \r\n            return (\r\n                <div key={`msg_${index}`} style={{width: '100%'}}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message={message} lastMessage={message[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n   if(!chat) return 'Loading...'\r\n    return(\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => `${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{height: '100px'}} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatFeed","import { useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const authObject =  { 'Project-ID': \"e8699b48-21eb-4a15-b746-96be32aa7ad1\", 'User-Name': username, 'User-Secret': password }\r\n\r\n        try {\r\n            await axios.get('https://api.chatengine.io/chats', { headers: authObject})\r\n\r\n            localStorage.setItem('username', username)\r\n            localStorage.setItem('password', password)\r\n\r\n            window.location.reload()\r\n        } catch(err){\r\n            setError('Oops, incorrect username or password')\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">Chat Application</h1>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)}  className=\"input\" placeholder=\"Username\" required />\r\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Start Chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport { ChatEngine } from 'react-chat-engine'\r\nimport ChatFeed from './components/ChatFeed'\r\nimport LoginForm from './components/Login'\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n\r\n    if(!localStorage.getItem('username')) return < LoginForm/>\r\n\r\n    return (\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID=\"e8699b48-21eb-4a15-b746-96be32aa7ad1\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}